<?php

namespace CuongNX\MongoPermission\Console\Commands;

use Illuminate\Console\Command;
use CuongNX\MongoPermission\Services\Contracts\PermissionServiceInterface;

class MongoPermissionManager extends Command
{
    protected $signature = 'mp:manage
        {--create-role= : T·∫°o 1 ho·∫∑c nhi·ªÅu role, ph√¢n c√°ch b·∫±ng d·∫•u ph·∫©y}
        {--delete-role= : Xo√° 1 ho·∫∑c nhi·ªÅu role, ph√¢n c√°ch b·∫±ng d·∫•u ph·∫©y}
        {--create-permission= : T·∫°o 1 ho·∫∑c nhi·ªÅu permission, ph√¢n c√°ch b·∫±ng d·∫•u ph·∫©y}
        {--delete-permission= : Xo√° 1 ho·∫∑c nhi·ªÅu permission, ph√¢n c√°ch b·∫±ng d·∫•u ph·∫©y}
        {--assign-permission= : G√°n permission cho role, c√∫ ph√°p role:perm1,perm2}
        {--guard=web : Guard ƒëang d√πng}
        {--list-roles : Li·ªát k√™ c√°c roles}
        {--list-permissions : Li·ªát k√™ c√°c permissions}
        {--reset : Xo√° to√†n b·ªô roles v√† permissions}
        {--export= : Xu·∫•t roles & permissions ra file JSON}
        {--import= : Nh·∫≠p roles & permissions t·ª´ file JSON}
        {--sync-role-permissions= : ƒê·ªìng b·ªô permission cho role, c√∫ ph√°p role:path/to/file.json}
        {--show-role= : Xem chi ti·∫øt 1 role}
    ';

    protected $description = 'Qu·∫£n l√Ω roles & permissions cho MongoDB';

    public function handle(PermissionServiceInterface $permissionService): void
    {
        $guard = $this->option('guard') ?? 'web';

        if ($this->option('create-role')) {
            $roles = $this->option('create-role');
            $result = $permissionService->createRoles($roles, $guard);
            $this->displayResult('T·∫°o role', $result);
        }

        if ($this->option('delete-role')) {
            $roles = $this->option('delete-role');
            $result = $permissionService->deleteRoles($roles, $guard);
            $this->displayResult('Xo√° role', $result);
        }

        if ($this->option('create-permission')) {
            $permissions = $this->option('create-permission');
            $result = $permissionService->createPermissions($permissions, $guard);
            $this->displayResult('T·∫°o permission', $result);
        }

        if ($this->option('delete-permission')) {
            $permissions = $this->option('delete-permission');
            $result = $permissionService->deletePermissions($permissions, $guard);
            $this->displayResult('Xo√° permission', $result);
        }

        if ($assign = $this->option('assign-permission')) {
            [$role, $perms] = explode(':', $assign);
            $result = $permissionService->assignPermissions($role, $perms, $guard);
            $this->displayResult("G√°n permission cho role [$role]", $result);
        }

        if ($this->option('list-roles')) {
            $roles = $permissionService->listRoles($guard);
            $this->info("üìã Danh s√°ch roles:");
            foreach ($roles as $role) {
                $this->line("- {$role['name']} ({$role['guard_name']})");
            }
        }

        if ($this->option('list-permissions')) {
            $perms = $permissionService->listPermissions($guard);
            $this->info("üìã Danh s√°ch permissions:");
            foreach ($perms as $perm) {
                $this->line("- {$perm['name']} ({$perm['guard_name']})");
            }
        }

        if ($this->option('reset')) {
            $permissionService->reset();
            $this->warn('üóëÔ∏è ƒê√£ xo√° to√†n b·ªô roles v√† permissions!');
        }

        if ($exportPath = $this->option('export')) {
            $permissionService->exportToFile($exportPath);
            $this->info("ƒê√£ xu·∫•t file: $exportPath");
        }

        if ($importPath = $this->option('import')) {
            $result = $permissionService->importFromFile($importPath, $guard);
            $this->displayResult("üì• Nh·∫≠p t·ª´ $importPath", $result);
        }

        if ($sync = $this->option('sync-role-permissions')) {
            [$role, $file] = explode(':', $sync);
            $result = $permissionService->syncRolePermissions($role, $file, $guard);
            $this->displayResult("üîÑ ƒê·ªìng b·ªô permission cho role [$role]", $result);
        }

        if ($show = $this->option('show-role')) {
            $data = $permissionService->showRole($show, $guard);
            $this->info("‚ÑπÔ∏è Th√¥ng tin role [$show]:");
            $this->line("- üõ°Ô∏è Guard: {$data['guard_name']}");
            $this->line("- üîë Permissions: " . implode(', ', $data['permissions'] ?? []));
        }
    }

    protected function displayResult(string $action, array $result): void
    {
        if (!empty($result['created'])) {
            $this->info("‚úÖ $action th√†nh c√¥ng: " . implode(', ', $result['created']));
        }
        if (!empty($result['skipped'])) {
            $this->warn("‚ö†Ô∏è $action b·ªã tr√πng (b·ªè qua): " . implode(', ', $result['skipped']));
        }
        if (!empty($result['failed'])) {
            $this->error("‚ùå $action th·∫•t b·∫°i: " . implode(', ', $result['failed']));
        }
    }
}
